{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","showNewProjectPopUp","project_path","project_name","projectList","key","name","handleSubmit","bind","e","preventDefault","console","log","this","newProject","axios","post","headers","response","setState","workspaces","map","item","className","src","width","height","onClick","onSubmit","type","placeholder","onChange","event","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,0NC8G5BC,G,wBA/Fb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,qBAAqB,EACrBC,aAAc,GACdC,aAAc,GACdC,YAAa,CAAC,CAAEC,IAAK,EAAGC,KAAM,iBAEhC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKP,oBAAsB,EAAKA,oBAAoBO,KAAzB,gBATf,E,0EAWKC,G,iFACjBA,EAAEC,iBAMFC,QAAQC,IAAIC,KAAKb,OACXc,E,aACJZ,aAAcW,KAAKb,MAAME,c,eACXW,KAAKb,MAAMG,c,mBAEJY,IAAMC,KAC3B,uCACAF,EACA,CAAEG,QAAS,CAAE,eAAgB,uB,OAHzBC,E,OAKNP,QAAQC,IAAIM,GACZL,KAAKM,SAAS,CAAEf,YAAY,GAAD,mBAAMS,KAAKb,MAAMI,aAAjB,CAA8BU,M,6FAGzDD,KAAKM,SAAS,CAAElB,qBAAqB,M,+BAE7B,IAAD,OAEDmB,EAAaP,KAAKb,MAAMI,YAAYiB,KAAI,SAACC,GAAD,OAC5C,yBAAKC,UAAU,YACb,yBAAKA,UAAU,uBACb,yBAAKC,IAAI,mFAAmFC,MAAM,OAAOC,OAAO,QAChH,yBAAKH,UAAU,aACb,uBAAGA,UAAU,yBAAyBD,EAAKhB,YAKnD,OACE,6BAEE,yBAAKiB,UAAU,wBACb,yBAAKA,UAAU,iBACb,uDACA,uBAAGA,UAAU,mBAAb,2DAIJ,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,sBAAsBI,QAASd,KAAKZ,qBACjD,yBAAKuB,IAAI,gFAAgFC,MAAM,OAAOC,OAAO,QAC7G,yBAAKH,UAAU,aACb,uBAAGA,UAAU,yBAAb,wBAILH,KAKNP,KAAKb,MAAMC,qBAAuB,6BACjC,0BAAM2B,SAAUf,KAAKN,cACnB,+CAEA,2BAAOsB,KAAK,OAAOC,YAAY,eAAeC,SAAU,SAAAC,GAAK,OAAI,EAAKb,SAAS,CAAEjB,aAAc8B,EAAMC,OAAOC,YAE5G,+CAEA,2BAAOL,KAAK,OAAOC,YAAY,eAAeC,SAAU,SAAAC,GAAK,OAAI,EAAKb,SAAS,CAAEhB,aAAc6B,EAAMC,OAAOC,YAE5G,6BACA,2BAAOL,KAAK,SAASK,MAAM,sB,GApFrBC,IAAMC,YCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.31647a18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\n\n// function App() {\n//   return (\n//     <div>\n//       <h1>Template Generator</h1>\n//       <button>create new</button>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      showNewProjectPopUp: false,\n      project_path: \"\",\n      project_name: \"\",\n      projectList: [{ key: 1, name: \"Workspace 1\" }]\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.showNewProjectPopUp = this.showNewProjectPopUp.bind(this)\n  }\n  async handleSubmit(e) {\n    e.preventDefault()\n    // fetch(`http://localhost:3000/create/project`)\n    //   // .then(res => res.json())\n    //   .then(result => {\n    //     console.log('////////', result)\n    //   })\n    console.log(this.state)\n    const newProject = {\n      project_path: this.state.project_path,\n      project_path: this.state.project_name\n    }\n    const response = await axios.post(\n      'http://localhost:3000/create/project',\n      newProject,\n      { headers: { 'Content-Type': 'application/json' } }\n    )\n    console.log(response)\n    this.setState({ projectList: [...this.state.projectList, newProject] })\n  }\n  showNewProjectPopUp() {\n    this.setState({ showNewProjectPopUp: true })\n  }\n  render() {\n    // const workspaceList = [{ key: 1, name: \"Workspace 1\" }]\n    const workspaces = this.state.projectList.map((item) => (\n      <div className=\"col-md-4\">\n        <div className=\"card mb-4 shadow-sm\">\n          <img src=\"http://pluspng.com/img-png/folder-png-education-folder-icon-image-23346-2400.jpg\" width=\"100%\" height=\"225\" />\n          <div className=\"card-body\">\n            <p className=\"card-text text-center\">{item.name}</p>\n          </div>\n        </div>\n      </div>\n    ))\n    return (\n      <div>\n        {/* section */}\n        <div className=\"jumboton text-center\">\n          <div className=\"container p-4\">\n            <h1>Node Template Generator</h1>\n            <p className=\"lead text-muted\">A web application to generate boilerplate for Node.js</p>\n          </div>\n        </div>\n        {/* content */}\n        <div className=\"album py-5 bg-light\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <div className=\"card mb-4 shadow-sm\" onClick={this.showNewProjectPopUp}>\n                  <img src=\"https://i.dlpng.com/static/png/1496258-pluspng-plus-png-1600_1600_preview.png\" width=\"100%\" height=\"225\" />\n                  <div className=\"card-body\">\n                    <p className=\"card-text text-center\">Add New Workspace</p>\n                  </div>\n                </div>\n              </div>\n              {workspaces}\n            </div>\n          </div>\n        </div>\n        {/* Form */}\n        {this.state.showNewProjectPopUp && <div>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Project Path:\n            <input type=\"text\" placeholder=\"project path\" onChange={event => this.setState({ project_path: event.target.value })} />\n            </label>\n            <label>\n              Project Name:\n            <input type=\"text\" placeholder=\"project name\" onChange={event => this.setState({ project_name: event.target.value })} />\n            </label>\n            <br />\n            <input type=\"submit\" value=\"Create New\" />\n          </form>\n        </div>}\n\n      </div>\n      // <div>\n      //   <h1>Template Generator</h1>\n      // </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}